;######################################################
; ganFet.ils: GaN FET Structure. Inherits from structure
;             class which is an aggregate component class.
;######################################################
defclass( ganFet (structure)
  (	  
    ( m      @reader getM      @writer setM )
    ( width  @reader getWidth  @writer setWidth)
    ( length @reader getLength @writer setLength )
    ( centroid @reader getCentroid @writer setCentroid )
    ( ref @reader getRef @writer setRef )
    ( rtrans )
    ( coreBBox @initarg coreBBox )
  ) 				  
);defclass
;#####################################################
; This method initializes the class
;#####################################################
defmethod( initializeInstance @after ((obj ganFet)) 
  obj->m = 2
  obj->width = 100.0
  obj->length = 0.2
  obj->centroid = makeInstance('point2)
  obj->rtrans = makeInstance('rectTrans)
);defmethod
;######################################################
; Draws the gate
;######################################################
defmethod( generate (( gf ganFet ))
  let( (m width length spacing shift fb gate rtran sdLen)
    m       = getM(gf)
    width   = getWidth(gf)
    length  = getLength(gf)
    sdLen   = 10.0
    spacing = length + sdLen
    shift   = 0.0
    fb = makeInstance( 'fetBody )
    setM(fb getM(gf))
    setWidth(fb getWidth(gf))
    setLength(fb sdLen)
    generate(fb)
    rtran = getRectTran(fb->rtrans)
    rtsAdd(gf->rtrans rtran)
    addComponent(gf fb)
    xtran = -10.4 - width/2.0
    for( i 0 sub1(m)
       println("INFO(ganFet): Generating gate structure")
       gate = makeInstance( 'ganGate )
       setRef(gate getRef(gf))
       setWidth(gate width)
       setLength(gate length)
       generate(gate)
       translate(gate list(xtran shift))
       rtran = getRectTran(gate->rtrans)
       rtsAdd(gf->rtrans rtran)
       addComponent(gf gate)
       shift = shift + spacing
    );for
    rtsUnion(gf->rtrans)
    ; No multiple inheritance
    ;callNextMethod()
  );let
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;