;######################################################
; ganFet.ils: GaN FET Structure. Inherits from structure
;             class which is an aggregate component class.
;######################################################
defclass( ganFet (structure)
  (	  
    ( m      @reader getM      @writer setM )
    ( width  @reader getWidth  @writer setWidth)
    ( length @reader getLength @writer setLength )
    ( centroid @reader getCentroid @writer setCentroid )
    ( ref @reader getRef @writer setRef )
    ( rtrans )
    ( coreBBox @initarg coreBBox )
  ) 				  
);defclass
;#####################################################
; This method initializes the class
;#####################################################
defmethod( initializeInstance @after ((obj ganFet)) 
  obj->m = 2
  obj->width = 100.0
  obj->length = 0.2
  obj->centroid = makeInstance('point2)
  obj->rtrans = makeInstance('rectTrans)
);defmethod
;######################################################
; Draws the gate
;######################################################
defmethod( generate (( gf ganFet ))
  let( (m gateWidth extension gateLength sdLength sdSpacing 
       xtran ytran fb gate rtran gdSpacing gSdSpacing sod
       aba)
    sod = nil
    sdLength   = 25.0
    sdSpacing  = 5.0
    extension  = 5.0
    gdSpacing  = 1.0
    gSdSpacing = 5.0
    m          = getM(gf)
    gateWidth  = getWidth(gf) + extension + gSdSpacing
    gateLength  = getLength(gf)
    fb = makeInstance( 'fetBody )
    setM(fb m)
    setWidth(fb getWidth(gf))
    setLength(fb sdLength)
    setSpacing(fb sdSpacing)
    generate(fb)
    rtran = getRectTran(fb->rtrans)
    rtsAdd(gf->rtrans rtran)
    addComponent(gf fb)
    ytran = sdLength/2.0+sdSpacing-getLength(gf)-gdSpacing
    gtran = sdLength + sdSpacing
    xtran = -10.4 - getWidth(gf)/2.0 - gSdSpacing
    for( i 0 sub1(m)
       println("INFO(ganFet): Generating gate structure")
       gate = makeInstance( 'ganGate )
       setRef(gate getRef(gf))
       setWidth(gate gateWidth)
       setLength(gate gateLength)
       generate(gate)
       translate(gate list(xtran ytran))
       rtran = getRectTran(gate->rtrans)
       rtsAdd(gf->rtrans rtran)
       addComponent(gf gate)
       ytran = ytran + gtran
    );for
    if(sod then
      aba = makeInstance( 'sodBridgeArray )
      setM(aba m)
      setWidth(aba getWidth(gf))
      setLength(aba sdLength)
      setSpacing(aba sdSpacing)
      generate(aba)
      addComponent(gf aba)
    );if
    rtsUnion(gf->rtrans)
    ; No multiple inheritance
    ;callNextMethod()
  );let
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;