;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;  collection.ils: object collection class. Collections are
;                  lists of objects that are homogeneous object
;                  lists
; FIXME: Enforce homogenous content via classOf(x) check after first entry
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Program SKILL Lint finished on Sep 13 14:51:51 2017 with status PASS.
;IQ score is 100 (best is 100).
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defclass( collection (cadObj)
  (
    ( n @reader getLen )
    ( list @reader getList @writer setList )
    ( cList )
    ( cType )		  
  )
);defclass

;############################################################
; Class Constructor 
;#############################################################
defmethod( initializeInstance @after ((obj collection)) 
	   obj->n = 0
           obj->list = makeInstance( 'listfun )
	   obj->cList = '()
	   obj->cid="col"
	   obj->oid=""
	   obj->cType = nil
);defmethod

;############################################################
; Clones a collection
;#############################################################
defmethod( cloneCollection ((col collection) arg)
   arg->n = col->n
   arg->cList = col->cList
   arg->oid = col->oid
   arg->cType = col->cType
   cloneListfun(col->list arg->list)  
);defmethod

;############################################################
; Serialize a collection
;#############################################################
defmethod( serializeCollection ((col collection))
  let((olist tlist)
    olist = '()
    tlist = '()
    olist = cons("collection" olist)
    tlist = cons(col->n tlist)
    tlist = cons(col->cList tlist)
    tlist = cons(col->oid tlist)
    tlist = cons(col->cType tlist)
    olist = cons("collection" olist)
    olist = cons("collection" tlist)
    olist = cons("collection" col->list)
  );let
);defmethod

;############################################################
; Deserialize a collection
;#############################################################
defmethod( deserializeCollection ((col collection) arg)
  let((olist tlist)
    tlist      = nth(1 arg)
    col->n     = nth(0 tlist)
    col->cList = nth(1 tlist)
    col->oid   = nth(2 tlist)
    col->cType = nth(3 tlist)
    col->list  = nth(2 arg)
  );let
);defmethod

;############################################################
; Resets the collection list to empty list
;#############################################################
defmethod( resetCollection ((col collection))
       resetList(col->list)
       col->n = 0
);defmethod

;############################################################
; Returns a reference to the collection list
;#############################################################
defmethod( getCollection ((col collection))
       col->list->elems
);defmethod

;############################################################
; Creates a list of N (objNum) unpopulated lib objects 
; in sequential order 
;#############################################################
defmethod( genCollection ((col collection) arg)
       for( i 0 sub1(col->n)
       	  lappendBeg(col->list makeInstance(stringToSymbol(arg)))
       );for
);defmethod

;############################################################
; Generate a listing of the class the objects belong to in
; the collection
;#############################################################
defmethod( class ((col collection))
  let( (i)
    i=0
    col->cList = '()
    foreach( obs getElems(col->list)
      col->cList = cons(classOf(obs) col->cList) 
      printf("%L\n" classOf(obs)) 
      i++   	  
    );foreach
  );let
);defmethod

;############################################################
; Add and object to the collection's list
; if first object perform no classOf check (isEmpty = t)
; if list is not empty (isEmpty = nil) enforce classOf test
;#############################################################
defmethod( add ((col collection) arg)
   if(isEmpty(col) then
     addTail(col->list arg)
     col->cType = classOf(arg)
     col->n = col->n + 1
   else
     ; FIXME: disabled this check. Needs to be smart enough to handle
     ;        inheritance (capsule inherits from geometry, but you
     ;        can't add a pure geometry)
     ;if(classp(arg col->cType) then
       addTail(col->list arg)
       col->n = col->n + 1
     ;else
     ;  printf("ERROR(collection): Input Class, %L, not compatible with collection contents\n" classOf(arg))
     ;);if
   );if
   col->n
);defmethod

;############################################################
;
;############################################################
defmethod( removeItem ((col collection) arg)
  removeElem(col->list arg)
);defmethod

;############################################################
; Get an item from the collection at index arg 
;#############################################################
defmethod( getItem ((col collection) arg)
   getElem(col->list arg)
);defmethod

;############################################################
; Is collection list empty
;#############################################################
defmethod( isEmpty ((col collection))
    null(col->list->elems)
);defmethod

;############################################################
; Creates a list of N (objNum) unpopulated lib objects 
; in sequential order 
;#############################################################
;defmethod( genCon ((cont collection) obj)
;  let( (  vName
;	  estrng )
;       for( i 0 sub1(cont->num)
;	  sprintf(vName "obj%d" i)
;	  sprintf(estrng strcat(vName "=makeInstance( '" obj->cid " )"))
;	  evalstring(estrng)
;	  sprintf(estrng strcat(obj->cid "->objList=cons(" vName " " obj->cid "->objList)"))
;	  evalstring(estrng)
;       );for
;     );let
;);defmethod

;############################################################
; Adds an object to the container list 
; FIXME: WIP!
;#############################################################
;defmethod( add ((obj collection))
;  let( (  vName
;	  estrng 
;;	  i)
;	  sprintf(estrng strcat("i = length(" obj->cid "->objList"))
;	  evalstring(estrng)
;	  sprintf(vName "obj%d" i)
;	  sprintf(estrng strcat(vName "=makeInstance( '" obj->cid " )"))
;	  evalstring(estrng)
;	  sprintf(estrng strcat(obj->cid "->objList=cons(" vName " " obj->cid "->objList)"))
;	  evalstring(estrng)
;	  obj->objNum=obj->objNum+1
;     );let
;);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;