;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;  numbers.ils: numbers class 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defclass( numbers (polygon2)
	  ( 
		( val @reader getVal @writer setVal) 
		( width )
		( height )
		( cd )
		( c0 )
		( c1 )
		( c2 )
		( c3 )
		( c4 )
		( c5 )
		( c6 )
		( c7 )
		( c8 )
		( c9 )								
	  )
);defClass
;#####################################################
; Class constructor
; This method initializes the class
; Initialized/Default Heigth is 50
;#####################################################
defmethod( initializeInstance @after ((obj numbers))  
	   obj->val = nil
	   obj->width = nil
	   obj->height = nil
	   obj->cd  = list(list(-5.5 -45.0) 
			   list(-5.5 1.0) 
			   list(5.5 1.0) 
			   list(5.5 -5.0) 
			   list(-5.5 -5.0)
			   list(-5.5 -45.0) 
			   list(10.0 -45.0) 
			   list(10.0 42.5) 
			   list(-10.0 42.5) 
			   list(-10.0 -45.0))
	   obj->c0  = list(list(35.0 -45.0) 
			   list(-35.0 -45.0) 
			   list(-35.0 42.5) 
			   list(23.0 42.5) 
			   list(23.0 35.0)
			   list(5.0 35.0) 
			   list(5.0 27.0) 
			   list(15.0 27.0) 
			   list(15.0 -29.5) 
			   list(-15.0 -29.5)
			   list(-15.0 27.0) 
			   list(-5.0 27.0) 
			   list(-5.0 35.0) 
			   list(-23.0 35.0) 
		           list(-23.0 -37.5)
			   list(23.0 -37.5) 
			   list(23.0 42.5) 
			   list(35.0 42.5))
	   obj->c1 = list( list(35.0 -45.0) 
		           list(-35.0 -45.0) 
		           list(-35.0 42.5) 
			   list(14.0 42.5) 
			   list(14.0 -29.5)
			   list(4.0 -29.5) 
			   list(4.0 31.0) 
			   list(-14.0 31.0) 
			   list(-14.0 25.0)
                           list(-4.0 25.0)
			   list(-4.0 -29.5)
			   list(-14.0 -29.5)
			   list(-14.0 -37.5)
			   list(14.0 -37.5)
			   list(14.0 42.5)
                           list(35.0 42.5))
	   obj->c2 = list(list(35.0 -45.0) 
			  list(-35.0 -45.0) 
			  list(-35.0 42.5) 
			  list(23.0 42.5) 
			  list(23.0 35.0)
			  list(-23.0 35.0) 
			  list(-23.0 27.0) 
			  list(14.55 27.0) 
			  list(14.55 2.5) 
			  list(-23.0 2.5)
			  list(-23.0 -37.5) 
			  list(23.0 -37.5) 
			  list(23.0 -29.5) 
			  list(-15.0 -29.5) 
			  list(-15.0 -6.0)
			  list(23.0 -6.0) 
			  list(23.0 42.5) 
			  list(35.0 42.5))
	   obj->c3 = list(list(35.0 -45.0) 
			  list(-35.0 -45.0) 
			  list(-35.0 42.5) 
			  list(23.0 42.5) 
		          list(23.0 35.0)
			  list(-23.0 35.0) 
			  list(-23.0 27.0) 
		          list(17.0 27.0) 
			  list(17.0 1.5) 
			  list(-23.0 1.5)
			  list(-23.0 -6.5) 
			  list(17.0 -6.5) 
			  list(17.0 -29.5) 
		          list(-23.0 -29.5) 
			  list(-23.0 -37.5)
		          list(23.0 -37.5) 
			  list(23.0 42.5) 
		          list(35.0 42.5))
	   obj->c4 = list(list(35.0 -45.0) 
			  list(-35.0 -45.0) 
			  list(-35.0 42.5) 
			  list(23.0 42.5) 
			  list(23.0 35.0)
			  list(15.0 35.0) 
			  list(15.0 5.5) 
			  list(-15.0 5.5) 
			  list(-15.0 35.0) 
			  list(-23.0 35.0)
			  list(-23.0 -2.5) 
			  list(15.0 -2.5) 
			  list(15.0 -37.5) 
			  list(23.0 -37.5) 
			  list(23.0 42.5)
			  list(35.0 42.5))
	   obj->c5 = list(list(35.0 -45.0) 
			  list(-35.0 -45.0) 
			  list(-35.0 42.5) 
			  list(23.0 42.5) 
			  list(23.0 35.0)
			  list(-23.0 35.0) 
			  list(-23.0 -5.5) 
			  list(15.0 -5.5) 
			  list(15.0 -29.5) 
			  list(-23.0 -29.5)
			  list(-23.0 -37.5) 
			  list(23.0 -37.5) 
			  list(23.0 2.5) 
			  list(-15.0 2.5) 
			  list(-15.0 27.0)
			  list(23.0 27.0) 
			  list(23.0 42.5) 
			  list(35.0 42.5))
	   obj->c6 = list(list(35.0 -45.0) 
			  list(-35.0 -45.0) 
			  list(-35.0 42.5) 
			  list(23.0 42.5) 
			  list(23.0 1.5)
		          list(-2.0 1.5) 
			  list(-2.0 -6.5) 
			  list(15.0 -6.5) 
			  list(15.0 -29.5) 
			  list(-15.0 -29.5)
			  list(-15.0 25.0) 
			  list(18.5 25.0) 
			  list(18.5 33.0) 
			  list(-23.0 33.0) 
			  list(-23.0 -37.5)
			  list(23.0 -37.5) 
			  list(23.0 42.5) 
			  list(35.0 42.5))
	   obj->c7 = list(list(35.0 -45.0) 
		     	  list(-35.0 -45.0) 
			  list(-35.0 42.5) 
			  list(23.0 42.5) 
			  list(23.0 33.0)
			  list(-23.0 33.0) 
			  list(-23.0 25.0) 
			  list(15.0 25.0) 
			  list(15.0 -37.5) 
			  list(23.0 -37.5)
			  list(23.0 42.5)
			  list(35.0 42.5))
	   obj->c8 = list(list(35.0 -45.0) 
			  list(-35.0 -45.0) 
			  list(-35.0 42.5) 
			  list(23.0 42.5) 
			  list(23.0 28.0)
			  list(15.0 28.0) 
			  list(15.0 1.5) 
			  list(-15.0 1.5) 
			  list(-15.0 25.0) 
			  list(7.0 25.0)
			  list(7.0 33.0) 
			  list(-23.0 33.0) 
			  list(-23.0 -32.5) 
			  list(-15.0 -32.5) 
			  list(-15.0 -6.5)
			  list(15.0 -6.5) 
			  list(15.0 -29.5) 
			  list(-7.0 -29.5) 
			  list(-7.0 -37.5) 
			  list(23.0 -37.5)
			  list(23.0 42.5) 
			  list(35.0 42.5))
	   obj->c9 = list(list(35.0 -45.0) 
			  list(-35.0 -45.0) 
			  list(-35.0 42.5) 
			  list(23.0 42.5) 
			  list(23.0 33.0)
			  list(-23.0 33.0) 
			  list(-23.0 -4.5) 
			  list(7.0 -4.5) 
			  list(7.0 3.5) 
			  list(-15.0 3.5)
			  list(-15.0 25.0) 
			  list(15.0 25.0) 
			  list(15.0 -37.5) 
			  list(23.0 -37.5) 
			  list(23.0 42.5)
			  list(35.0 42.5))
);defmethod

;#####################################################
; Width and height of of number member
;#####################################################

;#####################################################
; Generates a number polygon
;#####################################################
defmethod( generate (( np numbers ))
  let( (ret)
	   ret=nil
	   case(np->val
	       ("-"
	         ret=np->cd
               )
	       ("0"
	         ret=np->c0
               )
	       ("1"
	         ret=np->c1
               )
	       ("2"
	         ret=np->c2
               )
	       ("3"
	         ret=np->c3
               )
	       ("4"
	         ret=np->c4
               )
	       ("5"
	         ret=np->c5
               )
	       ("6"
	         ret=np->c6
               )
	       ("7"
	         ret=np->c7
               )
	       ("8"
	         ret=np->c8
               )
	       ("9"
	         ret=np->c9
               )
	       (t
	         ret=nil
	       )
	    );case
	    setVertices(np ret)
	    ret
  );let
);defmethod

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

