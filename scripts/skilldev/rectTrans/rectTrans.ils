;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; rectTrans.ils: Container class for a collection of rectTran objects.
;                Also has a member which is the
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defclass( rectTrans (rectTran)
  (
    ( rtrans @reader getRtrans )
;    ( rtran @reader getRectTran )		  
  )
);defclass
;#####################################################
; Constructor Method
;#####################################################
defmethod( initializeInstance @after ((obj rectTrans)) 
  obj->rtrans = makeInstance( 'collection )
;  obj->rtran = makeInstance( 'rectTran )
);defmethod
;#####################################################
; Add rectTran object to rectTrans collection
;#####################################################
defmethod( rtsAdd ((rts rectTrans) arg) 
  if(classp( arg 'rectTran) then
    add(rts->rtrans arg)
  else
    println("ERROR(rectTrans): Argument is not a rectTran object")
  );if
);defmethod
;#####################################################
; Generate the rectTran union of all the transforms
; in the  geometry
;#####################################################
defmethod( rtsUnion (( rts rectTrans ))
  rts->ur = list(0.0 0.0)
  rts->ll = list(0.0 0.0)
  foreach( rt getCollection(rts->rtrans)
    if(!null(rt->bbox) then
       union(rts rt)
;      union(rts->rtran rt)
    else
      println("ERROR(rectTrans): rectTran bbox not valid - Union failed!")
    );if
  );foreach 
  rtran2bbox(rts)
;  if(!null(rts->rtran->bbox) then
   if(!null(rts->bbox) then
    calculateCentroid(rts)
  );if
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Translates a rectran and rectrans
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;defmethod( translate (( rts rectTrans ) arg)
;  foreach(rtrn getCollection(rts->rtrans)
;    translate(rtrn arg)
;  );foreach
;  translate(rts->rtran arg)
;);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;