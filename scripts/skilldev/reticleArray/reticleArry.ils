;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;  reticleArray.il: Wafer Class
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defclass( reticleArray (cv)
  (
    ( width @reader getWidth @reader setWidth)
    ( height @reader getHeight @reader setHeight)) 
    ( reticle  @reader getReticle @reader setReticle)
    ( reticles @reader getReticles)
    ( rows @reader getRows @writer setRows)
    ( cols @read getCols @writer setCols)
    ( overlap @read getOverlap @writer setOverlap)	
  )
);defclass
;#####################################################
; Constructor Method
;#####################################################
defmethod( initializeInstance @after ((obj reticleArray))
  obj->width = nil
  obj->height = nil
  obj->reticle = nil
  obj->reticles = makeInstance( 'collection )
  obj->rows = nil
  obj->cols = nil
);defmethod
;######################################################
; Create Reticle Array
;######################################################
defmethod( array (( ra reticleArray ))
  let((ww wh rw rh r c ind x y)
    wl = ra->width
    wh = ra->height
    rw = getWidth(waf->reticle)
    rh = getHeight(waf->reticle)
    r = floor(wh/rh)
    c = floor(ww/rw)
    ra->rows = r
    ra->cols = c
    ol = ra->overlap
    ind = 0
    x = 0.0
    y = 0.0
    for(i 0 sub1(r)
      ind = ind + ind*i
      x = 0.0
      orig = list(x y)
      for(j 0 sub1(c)
        ind = ind + j
	x = xCoord(orig) + rw - ol
	ret = makeInstance( 'reticle )
	cloneRet(ra->reticle ret)
	setOrigin(ret orig)	
        add(ra->reticles ret)
	orig = list(x y)
      );for
      y = yCoord(orig) + rh - ol
    );for
    list(ra->rows ra->cols)
  );let
);defmethod

;######################################################
; Render reticle boundary box array
;######################################################
defmethod( render (( ra reticleArray ))
  foreach(ret getCollection(waf->reticles)
    printf("Reticle Origin: (%f,%f)\n" xCoord(ret->origin) yCoord(ret->origin))
    setRef(ret getRef(ra))
    renderRetBbox(ret)
  );foreach
);defmethod
;######################################################
; Render the boundary box of a single reticle into
; the target cellview
;######################################################
defmethod( renderBbox (( ra reticleArray ))
  let((ind ret r c)
    ra->rows = r
    ra->cols = c
    ind = 0.0
    for(i 0 sub1(r)
      ind = ind + ind*i
      for(j 0 sub1(c)
        ind = ind + j
        ret = getItem(reticles ind)
	renderRetBbox(ret)
      );for
    );for
  );let
);defmethod
;######################################################
;######################################################
;######################################################


	
