;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;  stamp.ils: stamp generator class 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defclass( stamp (geometry)
  ( 
    ( chars @reader getChars @writer setChars )
    ( origin @reader getOrigin @writer setOrigin )
    ( layer @reader getLayer @writer setLayer )
    ( purpose @reader getPurpose @writer setPurpose )
    ( len @reader getLength )							
  )
);defClass
;#####################################################
; Class constructor
;#####################################################
defmethod( initializeInstance @after ((obj stamp))
  obj->chars = ""  
  obj->origin = '()
  obj->layer = "text"
  obj->purpose = "drawing"
  obj->len = nil
);defmethod	   
;#####################################################
; Print a given array number within a cellview
;#####################################################
defmethod( generate (( st stamp ))
  let( (char an shift val cTran cwidth cTran wid)
    st->len = strlen(st->chars)
    an = makeInstance( 'alphaNumeric )
    shift = 0.0
    for(i 0 sub1(st->len)
      char = getchar(st->chars i+1)
      setVal(an char)
      val = generate(an)
      cTran = makeInstance( 'transform2 )
      setVertices(cTran val)
      cloneRectTran(cTran)
      setLayer(cTran getLayer(st))
      setPurpose(cTran getPurpose(st))
      translate(cTran list(shift 0.0))
      addTransform(st cTran)
      wid = getWidth(an)
      shift = shift + 1.2*wid
    );for
    translate(st list(xCoord(st->origin) yCoord(st->origin)))
  );let
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

