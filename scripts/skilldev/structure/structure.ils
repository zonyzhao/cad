;###################################################################
; structure.ils: Container class containing a collection
;                   of components
;###################################################################
defclass( structure (cadObj)
  (
    ( components @reader getComponents @writer setComponents )
    ;( rtrans )				  
  )
);defClass
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Constructor
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	
defmethod( initializeInstance @after ((obj structure)) 
  obj->components = makeInstance( 'collection )
  ;obj->rtrans = makeInstance( 'rectTrans ) 
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Adds an component to a structure
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	 	 
defmethod( addComponent (( struct structure ) arg)
  add(struct->components arg)
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Translates the component
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( translate (( struct structure ) arg)
  foreach(comp getCollection(struct->components)
    translate(comp arg)
  );foreach
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Rotates the component
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( rotate (( struct structure ) arg)
  foreach(comp getCollection(struct->components)
    rotate(comp arg)
  );foreach
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Render the component
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( render (( struct structure ))
  if(!isEmpty(struct->components) then
    foreach(comp getCollection(struct->components)
      setRef(comp getRef(struct))
      render(comp)
    );foreach
  else
    println("ERROR(structure): no components to render")
  );if
);defmethod
;###################################################################
;###################################################################
;###################################################################
