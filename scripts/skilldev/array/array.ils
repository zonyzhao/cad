;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;  array.ils: array of collection class
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defclass( array ()
  (
    ( rows @reader getRows @writer setRows)
    ( cols @reader getCols @writer setCols )
    ( object @reader getObject @writer setObject )
    ( list )
  )
);defClass
;#####################################################
; Constructor Method
;#####################################################
defmethod( initializeInstance @after ((obj array))
  obj->rows   = nil 
  obj->cols   = nil
  obj->object = nil
  obj->list  = makeInstance( 'collection )
);defmethod
;#####################################################
; clones the die
;#####################################################
defmethod( cloneArray (( ara array ) arg)
  arg->rows       = ara->rows
  arg->cols       = ara->cols
  cloneCollection(d arg->list)
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Generate the object array
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( generate (( ara array ))
  let( (len obj)
    len = ara->rows*ara->cols
    for(i 0 sub1(len)
      obj = makeInstance( className(classOf(ara->object)))
      add(ara->list obj)
    );for
  );let
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Get an array entry by position
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( getEntry (( ara array ) arg)
  let( (r c ind)
    r = xCoord(arg)
    c = yCoord(arg)
    ind = r*c+c
    nth(ind getCollection(ara->list))
  );let
);defmethod
;######################################################
;######################################################
;######################################################




	
