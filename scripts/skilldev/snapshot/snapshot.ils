;######################################################
;# snapshot.ils: 
;######################################################
defclass( snapshot (stackup)
   (
	  ( layerMap @reader getLayerMap @writer setLayerMap)
	  ( serialfile  @reader getSerialFile @writer setSerialFile)
   )				  
);defclass

;#####################################################
; This method initializes the class
;#####################################################
defmethod( initializeInstance @after ((obj snapshot)) 
  layerMap = nil
  serialfile = nil	   	     
);defmethod

;#####################################################
; Checks the vertices of all shapes for manufacturing grid
; compliance
;#####################################################
defmethod( checkMfg (( ss snapshot ))
  foreach( layer ss->layers->list->elems
    printf("INFO: Checking layer for MFG compliance: %s\n" layer->name)
    foreach(shp layer->shapes->list->elems
      isOnMfg(shp)
    );foreach
  );foreach
);defmethod

;#####################################################
; snaps the vertices of all shapes onto the manufacturing grid
;#####################################################
defmethod( setOnMfg (( ss snapshot ))
  let((n)
    foreach( layer ss->layers->list->elems
      printf("INFO: Regridding layer: %s\n" layer->layer)
      foreach(shp layer->shapes->list->elems
        setOnMfg(shp)
      );foreach
    );foreach
  );let
);defmethod

;#####################################################
; snaps vertices on the database grid
;#####################################################
;defmethod( setOnDbg (( shp shape ))
;	   let( (x
;	   	 y
;		 vertices)
;		 vertices = '()
;		 foreach( vert shp->vertices
;	           x=round(xCoord(vert)/shp->dbg) * shp->dbg
;	           y=round(yCoord(vert)/shp->dbg) * shp->dbg
;		   vertex =list(x y)
;		   vertices = cons(vertex vertices)
;		 );foreach
;		 shp->vertices=reverse(vertices)
;	   );let	   
;);defmethod



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;