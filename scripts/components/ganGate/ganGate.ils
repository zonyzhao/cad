;######################################################
; ganGate.ils: GaN fet gate class. Inherits from 
;              component class
;######################################################
defclass( ganGate (component)
  (
    ( width  @reader getWidth @writer setWidth )
    ( length @reader getLength @writer setLength )
    ( stem )
    ( pad )
    ( centroid )
    ( ref @reader getRef @writer setRef )
    ( rtrans )
    ( coreBBox @initarg coreBBox )
  ) 				  
);defclass
;#####################################################
; This method initializes the class
;#####################################################
defmethod( initializeInstance @after ((obj ganGate)) 
  obj->width = 100.0
  obj->length = 5.0
  obj->stem = makeInstance( 'gateStem )
  obj->pad = makeInstance( 'gatePad )
  obj->centroid = makeInstance('point2)
  obj->rtrans = makeInstance('rectTrans)
);defmethod
;######################################################
; Draws the gate
;######################################################
defmethod( generate (( gt ganGate ))
  let( (width length stemRectTran padRectTran)
    width = getWidth(gt)
    length = getLength(gt)
    setWidthInner(gt->pad 13.5)
    setHeightInner(gt->pad 4.0)
    setWidthOutter(gt->pad 13.5)
    setHeightOutter(gt->pad 5.6)
    setInnerLayer(gt->pad "resistor")
    setOutterLayer(gt->pad "membrane")
    setBsegLayer(gt->pad "thick")
    setRef(gt->pad getRef(gt))
    generate(gt->pad)
    addAssembly(gt gt->pad)
    setWidth(gt->stem width)
    setLength(gt->stem length)
    setWidthTaper(gt->stem 2.5)
    setLayer(gt->stem "membrane")
    setRef(gt->stem getRef(gt))
    generate(gt->stem)
    addAssembly(gt gt->stem)
    stemRectTran = getRectTran(gt->stem)
    padRectTran = getRectTran(gt->pad)
    rtsAdd(gt->rtrans stemRectTran) 
    rtsAdd(gt->rtrans padRectTran)
    rtsUnion(gt->rtrans)
  );let
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;