;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; twoPointsLine.ils: Inherits from the line class. Class that creates a 
;                     line pasing through two points. Contains two members
;                     that are points of that define the line
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defclass( twoPointsLine ( line )
  (
	( P1 @reader getPoint1 @writer setPoint1)
	( P2 @reader getPoint2 @writer setPoint2)
  )
);defclass
;#####################################################
; Constructor Method
;#####################################################
defmethod( initializeInstance @after ((obj twoPointsLine))
  obj->P1 = makeInstance( 'point ) 
  obj->P2 = makeInstance( 'point )
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( setP1 (( obj twoPointsLine ) pnt)
  setX(obj->P1 xCoord(pnt))
  setY(obj->P1 yCoord(pnt))
  Describe(obj->P1)
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( setP2 (( obj twoPointsLine ) pnt)
  setX(obj->P2 xCoord(pnt))
  setY(obj->P2 yCoord(pnt))
  Describe(obj->P2)
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( Describe (( obj twoPointsLine ))
  callNextMethod( obj )
  printf("...containing\n")
  Describe( obj->P1 )
  Describe( obj->P2 )
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( Validate (( obj twoPointsLine ))
  let( (x1 y1 x2 y2 A B C )
     x1 = obj->P1->x
     x2 = obj->P2->x
     y1 = obj->P1->y
     y2 = obj->P2->y
     A = obj->A
     B = obj->B
     C = obj->C
     if( A*x1+B*y1+C != 0.0 then
       error( "Invalid twoPointsLine\n" )
     );if
     if( A*x2+B*y2+C != 0.0 then
       error( "Invalid twoPointsLine\n" )
     );if
     t
     );let
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( Update (( obj twoPointsLine ))
  let( (x1 y1 x2 y2 m b)
    x1 = obj->P1->x
    x2 = obj->P2->x
    y1 = obj->P1->y
    y2 = obj->P2->y
    if( x2-x1 != 0 then
      m = (y2-y1)*1.0/(x2-x1)
      b = y2-m*x2
      obj->A = -m
      obj->B = 1
      obj->C = -b
    else
      obj->A = 1.0
      obj->B = 0.0
      obj->C = -x1
    );if
  );let
  callNextMethod( obj )
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
