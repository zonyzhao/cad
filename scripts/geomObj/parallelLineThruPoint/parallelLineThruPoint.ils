;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; lineThruPnt.ils: Class inheriting from line class. Class 
;                    represents a line that pases through a point
;                    Members are a point and a line object
;                    that is itself parrallel to the other line.
;                    1.) To specify point - instantiate the point
;                        object
;                    2.) To specify the line - instantiate a line
;                        object
;                    3.) Update the line object such that it passes 
;                        through the point object
;                    4.) Describe the updated line
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defclass( lineThruPnt ( line )
  (
	( P @reader getPoint @writer setPoint )
	( L @reader getLine @writer setLine )
  )
);defclass
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Constructor Method
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( initializeInstance @after ((obj lineThruPnt))
  obj->P = makeInstance( 'point ) 
  obj->L = makeInstance( 'twoPointsLine )
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( setP (( obj lineThruPnt ) pnt)
  setX(obj->P xCoord(pnt))
  setY(obj->P yCoord(pnt))
  Describe(obj->P)
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( setL (( obj lineThruPnt) pnt1 pnt2)
  setP1(obj->L pnt1)
  setP2(obj->L pnt2)
  Update(obj->L)
  if(Validate(obj->L) then
    Describe(obj->L)
  );if
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( Validate (( obj lineThruPnt ))
  let( (x1 y1 A B C LA LB LC)
       x1 = obj->P->x
       y1 = obj->P->y
       LA = obj->L->A
       LB = obj->L->B
       LC = obj->L->C
       A = obj->A
       B = obj->B
       C = obj->C
       when( A*LB-LA*B != 0.0 || A*x1+B*y1+C != 0
         error("Invalid lineThruPnt\n")
       );when
       t
  );let
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( Describe (( obj lineThruPnt ))
  callNextMethod( obj )
  printf("...Containing\n")
  Describe( obj->P )
  printf("...Parallel to\n")
  Describe( obj->L )
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( Update (( obj lineThruPnt ))
  let( (A B C x1 y1)
       Update(obj->P)
       Update(obj->L)
       A=obj->L->A
       B=obj->L->B
       C=obj->L->C
       x1=obj->P->x
       y1=obj->P->y
       obj->A=A
       obj->B=B
       obj->C=-(A*x1+B*y1)
       callNextMethod( obj )
  );let
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

       