;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; intersectTwoLinesPoint.ils: Class inheriting from the point class. 
;                             class representing the point where two lines
;                             intersect. Includes two slots which store the lines
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defclass( intersectTwoLines ( point )
  (
	( L1 @reader getLine1 @writer setLine1 )
	( L2 @reader getLine2 @writer setLine2 )
  )
);defclass
;#####################################################
; Constructor Method
;#####################################################
defmethod( initializeInstance @after ((obj intersectTwoLines))
  obj->L1 = makeInstance( 'twoPointsLine ) 
  obj->L2 = makeInstance( 'twoPointsLine )
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( setL1 (( obj intersectTwoLines ) pnt1 pnt2)
  setP1(obj->L1 pnt1)
  setP2(obj->L1 pnt2)
  Update(obj->L1)
  if(Validate(obj->L1) then
    Describe(obj->L1)
  );if
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( setL2 (( obj intersectTwoLines ) pnt1 pnt2)
  setP1(obj->L2 pnt1)
  setP2(obj->L2 pnt2)
  Update(obj->L2)
  if(Validate(obj->L2) then
    Describe(obj->L2)
  );if
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( Describe (( obj intersectTwoLines  ))
  callNextMethod( obj ) ;;; calls method of generic superclass point description 
  printf( "...intersection of\n")
  Describe( obj->L1 )
  Describe( obj->L2 )
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( Validate (( obj intersectTwoLines ))
  let( (A1 B1 C1 A2 B2 C2 x y)
    A1 = obj->L1->A
    B1 = obj->L1->B
    C1 = obj->L1->C
    A2 = obj->L2->A
    B2 = obj->L2->B
    C2 = obj->L2->C
    x = obj->x
    y = obj->y
    when( A1*x+B1*y+C1 != 0.0 || A2*x+B2*y+C2 != 0.0
      error("Invalid intersectTwoLinesPoint\n")
    );when
    t
  );let
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; check to see if two lines have values ...
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( Update (( obj  intersectTwoLines ))
  ;printf("Figure out x & y from lines %L %L\n" obj->L1 obj->L2)
  let( (A1 B1 C1 A2 B2 C2 det )
    Update(obj->L1)
    Update(obj->L2)
    A1 = obj->L1->A
    B1 = obj->L1->B
    C1 = obj->L1->C
    A2 = obj->L2->A
    B2 = obj->L2->B
    C2 = obj->L2->C
    det = A1*B2-A2*B1
    when( det == 0.0
      error("Can not intersect two parallel lines\n")
    );when
    obj->x = ((-C1)*B2-(-C2)*B1)*1.0/det
    obj->y = (A1*(-C2)-A2*(-C1))*1.0/det
  );let
  callNextMethod( obj )	  
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;