;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;  outlineChip.ils: Chip outline Pcell Skill++ code 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defclass( outlineChip (PcellParam)
	  (
		( width @initform defineParam("float" 1000.0))	
		( length @initform defineParam("float" 1000.0))
		( edgeWidth @initform defineParam("float" 95.0))
		( col )
		( centroid )
		( ref @reader getRef @writer setRef )
		( rtrans )
		( coreBBox @initarg coreBBox )	  
	  )
) ; defClass

;#####################################################
; This method initializes the class
;#####################################################
defmethod( initializeInstance @after ((obj outlineChip)) 
	   obj->col = makeInstance( 'outline )
	   obj->centroid = makeInstance('point2)
	   obj->rtrans = makeInstance('rectTrans)
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This method draws the shapes of the mesa resistor
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defmethod( draw ((device outlineChip))
  let( (width length edgeWidth colRectTran )
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   ;; Formal Parameters
   width = getParamValue(device 'width)
   length = getParamValue(device 'length)
   edgeWidth = getParamValue(device 'edgeWidth)
   setWidth(device->col width)
   setLength(device->col length)
   setEdgeWidth(device->col edgeWidth)
   ;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   setLayer(device->col "GRID")
   setPurpose(device->col "drawing")
   setRef(device->col getRef(device))
   generate(device->col)
   render(device->col)
   colRectTran = getRectTran(device->col)
   rtsAdd(device->rtrans colRectTran)
   setSlotValue(device 'coreBBox list( getLowerLeft(device->rtrans->rtran) getUpperRight(device->rtrans->rtran)))
   callNextMethod()
  );let
);defmethod