;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; cframe.ils: Chip/Reticle frame with specilized corners  
; FIXME: This cornered frame has limitations. The radius is defined via 
;        the the frame edgewidth. For edgewidths larger than TBD (~500um) 
;        the number of on grid, rounded corner points exceeds the Cadence
;        rendering maximum of 2048. The problem is that the circle class
;        needs to detect when a circle class polygon is greater than 2048,
;        and then create a collection of arcs that have points less than 2048.
;        This collection needs to be rendered, and then a post rendering merge
;        conducted within Cadence to form the large circumference radial 
;        geometry.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
defclass( cframe (assembly)
	  (
		( width @reader getWidth @writer setWidth )
		( height @reader getHeight @writer setHeight )
		( edgeWidth @reader getEdgeWidth @writer setEdgeWidth )
		( rounded @reader getRounded @writer setRounded )		
		( layer @reader getLayer @writer setLayer )
	  	( purpose @reader getPurpose @writer setPurpose )
		( centroid @reader getCentroid @writer setCentroid )			
	  )				  
);defclass
;######################################################
;# Constructor
;######################################################
defmethod( initializeInstance @after ((obj cframe)) 
	   obj->width     = 10000.0
           obj->height    = 10000.0	   
	   obj->edgeWidth = 100.0
	   obj->rounded = 't
	   obj->layer = "text"
	   obj->purpose = "drawing"
	   obj->centroid = makeInstance( 'point2 )
);defmethod
;######################################################
; Generates the assembly
;######################################################
defmethod( generate (( cfr cframe ))
  let((wid hgt ewid mwid mhgt bot top left right lTran
       rTran bTran tTran uro ulo llo lro medg grid
       uri uli lli lri uroTran uloTran lloTran lroTran
       uriTran uliTran lliTran lriTran)
    wid = cfr->width 
    hgt = cfr->height
    ewid = cfr->edgeWidth
    medg = 20.0
    mwid = 2*ewid
    mhgt = mwid
    grid = 0.1
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Minimum and clamp checks
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; edge
    if(ewid < medg then
      ewid = medg
    );if
    ; width
    if(wid < mwid then
      wid = mwid
    );if
    ; height
    if(hgt < mhgt then
      hgt = mhgt
    );if
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Frame Bottom
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    bot = makeInstance( 'rectangle )
    setWidth(bot wid-2*ewid+2*grid)
    setHeight(bot ewid)
    generate(bot)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Frame Top
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    top = makeInstance( 'rectangle )
    setWidth(top wid-2*ewid+2*grid)
    setHeight(top ewid)
    generate(top)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Frame Left
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    left = makeInstance( 'rectangle )
    setWidth(left ewid)
    setHeight(left hgt-2*ewid+2*grid)
    generate(left)
     ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Frame Right
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    right = makeInstance( 'rectangle )
    setWidth(right ewid)
    setHeight(right hgt-2*ewid+2*grid)
    generate(right)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; UR Outside Corner
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    uro = makeInstance( 'circle )
    setRadius(uro ewid)
    setGrid(uro 0.1)
    generateQuarterCircle(uro)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; UL Outside Corner
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ulo = makeInstance( 'circle )
    setRadius(ulo ewid)
    setGrid(ulo 0.1)
    generateQuarterCircle(ulo)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; LR Outside Corner
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lro = makeInstance( 'circle )
    setRadius(lro ewid)
    setGrid(lro 0.1)
    generateQuarterCircle(lro)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; LR Outside Corner
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    llo = makeInstance( 'circle )
    setRadius(llo ewid)
    setGrid(llo 0.1)
    generateQuarterCircle(llo)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; UR Inside Corner
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    uri = makeInstance( 'circle )
    setRadius(uri ewid)
    setGrid(uri 0.1)
    generateQuarterCircleInv(uri)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; UL Inside Corner
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    uli = makeInstance( 'circle )
    setRadius(uli ewid)
    setGrid(uli 0.1)
    generateQuarterCircleInv(uli)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; LR Inside Corner
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lri = makeInstance( 'circle )
    setRadius(lri ewid)
    setGrid(lri 0.1)
    generateQuarterCircleInv(lri)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; LL Inside Corner
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lli = makeInstance( 'circle )
    setRadius(lli ewid)
    setGrid(lli 0.1)
    generateQuarterCircleInv(lli)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Frame Bottom transform
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    bTran = makeInstance( 'transform2 )
    setVertices(bTran getVertices(bot))
    setCentroid(bTran getCentroid(bot))
    ;cloneRectTran(bTran)
    setLayer(bTran getLayer(cfr))
    setPurpose(bTran getPurpose(cfr))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Frame Top transform
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    tTran = makeInstance( 'transform2 )
    setVertices(tTran getVertices(top))
    setCentroid(tTran getCentroid(top))
    ;cloneRectTran(tTran)
    setLayer(tTran getLayer(cfr))
    setPurpose(tTran getPurpose(cfr))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Frame Left transform
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lTran = makeInstance( 'transform2 )
    setVertices(lTran getVertices(left))
    setCentroid(lTran getCentroid(left))
    ;cloneRectTran(lTran)
    setLayer(lTran getLayer(cfr))
    setPurpose(lTran getPurpose(cfr))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Frame Right transform
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    rTran = makeInstance( 'transform2 )
    setVertices(rTran getVertices(right))
    setCentroid(rTran getCentroid(right))
    ;cloneRectTran(rTran)
    setLayer(rTran getLayer(cfr))
    setPurpose(rTran getPurpose(cfr))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; UR Outside Corner Transform
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    uroTran = makeInstance( 'transform2 )
    setVertices(uroTran getVertices(uro))
    setCentroid(uroTran getCentroid(uro))
    ;cloneRectTran(uroTran)
    setLayer(uroTran getLayer(cfr))
    setPurpose(uroTran getPurpose(cfr))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; UL Outside Corner Transform
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    uloTran = makeInstance( 'transform2 )
    setVertices(uloTran getVertices(ulo))
    setCentroid(uloTran getCentroid(ulo))
    ;cloneRectTran(uloTran)
    setLayer(uloTran getLayer(cfr))
    setPurpose(uloTran getPurpose(cfr))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; LR Outside Corner Transform
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lroTran = makeInstance( 'transform2 )
    setVertices(lroTran getVertices(lro))
    setCentroid(lroTran getCentroid(lro))
    ;cloneRectTran(lroTran)
    setLayer(lroTran getLayer(cfr))
    setPurpose(lroTran getPurpose(cfr))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; LL Outside Corner Transform
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lloTran = makeInstance( 'transform2 )
    setVertices(lloTran getVertices(llo))
    setCentroid(lloTran getCentroid(llo))
    ;cloneRectTran(lloTran)
    setLayer(lloTran getLayer(cfr))
    setPurpose(lloTran getPurpose(cfr))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; UR Inside Corner Transform
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    uriTran = makeInstance( 'transform2 )
    setVertices(uriTran getVertices(uri))
    setCentroid(uriTran getCentroid(uri))
    ;cloneRectTran(uriTran)
    setLayer(uriTran getLayer(cfr))
    setPurpose(uriTran getPurpose(cfr))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; UL Inside Corner Transform
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    uliTran = makeInstance( 'transform2 )
    setVertices(uliTran getVertices(uli))
    setCentroid(uliTran getCentroid(uli))
    ;cloneRectTran(uliTran)
    setLayer(uliTran getLayer(cfr))
    setPurpose(uliTran getPurpose(cfr))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; LR Inside Corner Transform
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lriTran = makeInstance( 'transform2 )
    setVertices(lriTran getVertices(lri))
    setCentroid(lriTran getCentroid(lri))
    ;cloneRectTran(lriTran)
    setLayer(lriTran getLayer(cfr))
    setPurpose(lriTran getPurpose(cfr))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; LL Inside Corner Transform
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    lliTran = makeInstance( 'transform2 )
    setVertices(lliTran getVertices(lli))
    setCentroid(lliTran getCentroid(lli))
    ;cloneRectTran(lliTran)
    setLayer(lliTran getLayer(cfr))
    setPurpose(lliTran getPurpose(cfr))
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 
    ; Translate Frame Edges to correct positions
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    translate(bTran list(0.0 hgt/2.0-ewid/2.0))
    translate(tTran list(0.0 -hgt/2.0+ewid/2.0))
    translate(lTran list(-wid/2.0+ewid/2.0 0.0))
    translate(rTran list(wid/2.0-ewid/2.0 0.0))
    translate(uroTran list(wid/2.0-ewid hgt/2.0-ewid))
    rotate(uloTran 90.0)
    translate(uloTran list(-wid/2.0+ewid hgt/2.0-ewid))
    rotate(lroTran -90.0)
    translate(lroTran list(wid/2.0-ewid -hgt/2.0+ewid))
    rotate(lloTran 180.0)
    translate(lloTran list(-wid/2.0+ewid -hgt/2.0+ewid))
    translate(uriTran list(wid/2.0-2*ewid hgt/2.0-2.0*ewid))
    rotate(uliTran 90.0)
    translate(uliTran list(-wid/2.0+2*ewid hgt/2.0-2.0*ewid))    
    rotate(lriTran -90.0)
    translate(lriTran list(wid/2.0-2*ewid -hgt/2.0+2.0*ewid))  
    rotate(lliTran 180.0)
    translate(lliTran list(-wid/2.0+2*ewid -hgt/2.0+2.0*ewid))   
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Frame Geometry Group
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    geomGroup = makeInstance('geometry)
    addTransform(geomGroup bTran)
    addTransform(geomGroup tTran)
    addTransform(geomGroup lTran)
    addTransform(geomGroup rTran)
    addTransform(geomGroup uroTran)
    addTransform(geomGroup uloTran)
    addTransform(geomGroup lroTran)
    addTransform(geomGroup lloTran)
    addTransform(geomGroup uriTran)
    addTransform(geomGroup uliTran)
    addTransform(geomGroup lriTran)
    addTransform(geomGroup lliTran)
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; this assembly
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    addGeometry(cfr geomGroup)
    ;rtsAdd(cfr->rtrans getRectTran(geomGroup))
    ;rtsUnion(cfr->rtrans)
  );let
);defmethod
;###################################################################
;###################################################################
;###################################################################