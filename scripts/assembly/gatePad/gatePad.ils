;######################################################
;  gatePad.ils: FET gate pad class.
;               Width and height variables are associated
;               with the inner gate pad capsule     
;######################################################
defclass( gatePad (assembly)
  (
    ( widthInner @reader getWidthInner @writer setWidthInner )
    ( heightInner @reader getHeightInner @writer setHeightInner )
    ( widthOutter @reader getWidthOutter @writer setWidthOutter )
    ( heightOutter @reader getHeightOutter @writer setHeightOutter )
    ( innerLayer @reader getInnerLayer @writer setInnerLayer )
    ( innerPurpose @reader getInnerPurpose @writer setInnerPurpose )
    ( outterLayer @reader getOutterLayer @writer setOutterLayer )
    ( outterPurpose @reader getOutterPurpose @writer setOutterPurpose )
    ( bsegLayer @reader getBsegLayer @writer setBsegLayer )
    ( bsegPurpose @reader getBsegPurpose @writer setBsegPurpose )
    ( centroid @reader getCentroid @writer setCentroid )
  )				  
);defclass
;#####################################################
; This method initializes the class
;#####################################################
defmethod( initializeInstance @after ((obj gatePad)) 
  obj->widthInner    = 1.0
  obj->heightInner   = 1.0
  obj->widthOutter   = 1.1
  obj->heightOutter  = 1.1
  obj->innerLayer    = "text"
  obj->outterLayer   = "text"
  obj->innerPurpose  = "drawing"
  obj->outterPurpose = "drawing"
  obj->bsegLayer     = "text"
  obj->bsegPurpose   = "drawing"
  obj->centroid      = makeInstance( 'point2 )
);defmethod
;######################################################
; Generates the assembly
;######################################################
defmethod( generate (( gp gatePad ))
  capOutter = makeInstance('capsule)
  setWidth(capOutter gp->widthOutter)
  setHeight(capOutter gp->heightOutter)
  generate(capOutter)
  setLayer(capOutter getOutterLayer(gp))
  setPurpose(capOutter getOutterPurpose(gp))
  addGeometry(gp capOutter)
  rtsAdd(gp->rtrans capOutter->rtrans)
;
  capInner = makeInstance('capsule)
  setWidth(capInner gp->widthInner)
  setHeight(capInner gp->heightInner)
  generate(capInner)
  setLayer(capInner getInnerLayer(gp))
  setPurpose(capInner getInnerPurpose(gp))
  addGeometry(gp capInner)
  rtsAdd(gp->rtrans capInner->rtrans)
;
  bseg = makeInstance('rectangle)
  setWidth(bseg 2*gp->widthOutter)
  setHeight(bseg 2*gp->heightOutter)
  generate(bseg)
  bsegTran = makeInstance( 'transform2 )
  setVertices(bsegTran getVertices(bseg))
  setCentroid(bsegTran getCentroid(bseg))
  cloneRectTran(bsegTran)
  setLayer(bsegTran getBsegLayer(gp))
  setPurpose(bsegTran getBsegPurpose(gp))
  bsegGeom = makeInstance( 'geometry )
  addTransform(bsegGeom bsegTran)
  rectTranUnion(bsegGeom)
  addGeometry(gp bsegGeom)
  rtsAdd(gp->rtrans bsegGeom->rtrans)
  rtsUnion(gp->rtrans)
);defmethod
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;