Stack = let( ()
        procedure( getContents( aStack )
          aStack->contents
        );procedure
	procedure( setContents( aStack aList )
          aStack->contents = aList
        );procedure
	procedure( ppush( aStack aValue )
          setContents( aStack cons( aValue getContents( aStack )))
        );procedure
	procedure( ppop( aStack )
          letseq( (
                ( contents getContents( aStack ))
                ( v car( contents ))
		)
		setContents( aStack cdr( contents ))
		v
          );letseq
	);procedure
	procedure( new( initialContents )
          list( nil 'contents initialContents )
        );procedure
;	list( nil
 ;             'ppop ppop
;	      'ppush ppush
;	      'new new
;             );list
);let

defstruct(myStruct slot1 slot2 slot3)
struct = make_myStruct(?slot1 "one" ?slot2 "two" ?slot3 "three")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
S = Stack->new( '(1 2 3 4)) 
Stack->ppop( S ) 
Stack->ppush( S 1 )

defstruct(Stack 
	  procedure( new( initialContents )
            list( nil 'contents initialContents )
          );procedure
);defstruct

Stack->



defstruct(stack new ppop ppush get set)
stk = make_stack(?new procedure( new( initialContents )
          	        list( nil 'contents initialContents )
        	      );procedure
                 ?ppop procedure( _ppop( aStack )
                         letseq( (
                                   ( contents get( aStack ))
                                   ( v car( contents ))
		                 )
		            set( aStack cdr( contents ))
		            v
                          );letseq
	                );procedure
		 ?get procedure( _get( aStack )
         	        aStack->contents
		      );procedure
                 ?set procedure( _set( aStack aList )
                        aStack->contents = aList
                      );procedure
                 ?ppush "three")

stk->new( '(1 2 3 4)) 
stk->ppop(5)

defstruct(cadObject new gridCheck)
co = make_cadObject(?new makeInstance( 'cadObj )
                    ?gridCheck defmethod( _gridCheck (( cobj cadObj ) arg)
		                 letseq(
	                             if(cobj->grid == arg then
	                               't
                                     else
                                       nil
                                      ):if
				  );letseq
                               );defMethod
                   );make_cadObject

foo = co->new 
foo->layer
foo->purpose
getLayer(foo)
co->gridCheck
co->gridCheck(foo 0.1)
_gridCheck(foo 0.1)


lib = "pd0164"
name = "viaTest"
view = "layout"
type = "maskLayout"
cv = dbOpenCellViewByType( lib name view type "r")
setRef(foo cv)
setAttrList(foo)

defmethod( checkGrid (( cobj cadObj ) arg)
	if(cobj->grid == arg then
	  't
        else
           nil
        )
) ; defMethod

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Define the class's method package
defstruct(cadObjectMethods gridCheck)
com = make_cadObjectMethods(?gridCheck 
                             defmethod( _gridCheck (( cobj cadObj ) arg)
		               letseq((ret)
	                         if(cobj->grid == arg then
	                           ret='t
                                 else
                                   ret = nil
                                 ):if
				 ret
			       );letseq
                             );defMethod
);make_cadObjectMethods

com->gridCheck

cadObj = makeInstance( 'cadObj )

com~>gridCheck(cadObj 0.1)

_gridCheck(cadObj 0.1)
gridCheck(cadObj 0.1)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



Stack = let( ()
        defmethod( gridCheck (( cobj cadObj ) arg)
		               let((ret)
	                         if(cobj->grid == arg then
	                           ret='t
                                 else
                                   ret = nil
                                 ):if
				 ret
			       );let
        );defMethod
);let

cadObj = makeInstance( 'cadObj )
S = Stack->gridCheck
Stack->gridCheck(cadObj 0.0 ) 
Stack->ppush( S 1 )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
procedure( makeStack( initialContents )
  let( (( theStack initialContents ))
    procedure( ppush(value)
      theStack = cons(value theStack)
    );procedure
    procedure( ppop()
      let( (( v car( theStack ) ))
           v
      );let
    );procedure
    lambda( (msg)
      case( msg
          (( ppush ) ppush )
	  (( ppop ) ppop )
	  ( t nil )
      );case
    );lambda
  );let
);procedure

S = makeStack( '(1 2 3 4) )


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
cadObj = makeInstance( 'cadObj )
gridCheck(cadObj 0.1)

procedure( makeMethods()
  let( ()
    defmethod( gridCheck (( cobj cadObj ) arg)
		               let((ret)
			       nil
			       );letseq
                             );defMethod
    lambda( (msg)
      case( msg
          (( gridCheck ) gridCheck )
	  ( t nil )
      );case
    );lambda
  );let
);procedure

M = makeMethods()

gridCheck(cadObj 0.1)

co = let( ()
    
    defmethod( gridCheck (( cobj cadObj ) arg)
		               let((ret)
			       nil
			       );letseq
                             );defMethod
    lambda( (msg)
      case( msg
          (( gridCheck ) gridCheck )
	  ( t nil )
      );case
    );lambda
);let