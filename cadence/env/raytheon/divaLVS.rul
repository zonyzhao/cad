(lvsRules 
    procedure((seriesResistor pl1 pl2) 
	prog((pl) 
	    (pl = ncons(nil)) 
	    if((pl1->r) then 
		if((pl2->r) then 
		    (pl->r = ((pl1->r) + (pl2->r))) else 
		    (pl->r = (pl1->r))
		) else 
		if((pl2->r) then 
		    (pl->r = (pl2->r))
		)
	    ) 
	    return(pl)
	)
    ) 
    procedure((seriesCapacitor pl1 pl2) 
	prog((pl) 
	    (pl = ncons(nil)) 
	    if((pl1->c) then 
		if((pl2->c) then 
		    (pl->c = (((pl1->c) * (pl2->c)) / ((pl1->c) + (pl2->c)))) else 
		    (pl->c = (pl1->c))
		) else 
		if((pl2->c) then 
		    (pl->c = (pl2->c))
		)
	    ) 
	    return(pl)
	)
    ) 
    procedure((seriesInductor pl1 pl2) 
	prog((pl) 
	    (pl = ncons(nil)) 
	    if((pl1->l) then 
		if((pl2->l) then 
		    (pl->l = ((pl1->l) + (pl2->l))) else 
		    (pl->l = (pl1->l))
		) else 
		if((pl2->l) then 
		    (pl->l = (pl2->l))
		)
	    ) 
	    return(pl)
	)
    ) 
    procedure((parallelResistor pl1 pl2) 
	prog((pl) 
	    (pl = ncons(nil)) 
	    if((pl1->r) then 
		if((pl2->r) then 
		    (pl->r = (((pl1->r) * (pl2->r)) / ((pl1->r) + (pl2->r)))) else 
		    (pl->r = (pl1->r))
		) else 
		if((pl2->r) then 
		    (pl->r = (pl2->r))
		)
	    ) 
	    return(pl)
	)
    )
    procedure((parallelInductor pl1 pl2) 
	prog((pl) 
	    (pl = ncons(nil)) 
	    if((pl1->l) then 
		if((pl2->l) then 
		    (pl->l = (((pl1->l) * (pl2->l)) / ((pl1->l) + (pl2->l)))) else 
		    (pl->l = (pl1->l))
		) else 
		if((pl2->l) then 
		    (pl->l = (pl2->l))
		)
	    ) 
	    return(pl)
	)
    ) 
    procedure((parallelDiode pl1 pl2) 
	prog((pl) 
	    (pl = ncons(nil)) 
	    if((pl1->w) then 
		if((pl2->w) then 
		    (pl->w = ((pl1->w) + (pl2->w))) else 
		    (pl->w = (pl1->w))
		) else 
		if((pl2->w) then 
		    (pl->w = (pl2->w))
		)
	    ) 
	    return(pl)
	)
    ) 
    procedure((parallelCapacitor pl1 pl2) 
	prog((pl) 
	    (pl = ncons(nil)) 
	    if((pl1->c) then 
		if((pl2->c) then 
		    (pl->c = ((pl1->c) + (pl2->c))) else 
		    (pl->c = (pl1->c))
		) else 
		if((pl2->c) then 
		    (pl->c = (pl2->c))
		)
	    ) 
	    return(pl)
	)
    ) 
    procedure((parallelMOS pl1 pl2) 
	prog((pl) 
	    (pl = ncons(nil)) 
	    if(((pl1->l) && (pl2->l)) then 
		if(((pl1->l) == (pl2->l)) then 
		    (pl->l = (pl1->l)) else 
		    (pl->l = -1.0)
		)
	    ) 
	    if((pl1->w) then 
		if((pl2->w) then 
		    (pl->w = ((pl1->w) + (pl2->w))) else 
		    (pl->w = (pl1->w))
		) else 
		if((pl2->w) then 
		    (pl->w = (pl2->w))
		)
	    ) 
	    return(pl)
	)
    ) 
    procedure((compareResistor laypl schpl) 
	prog((layr schr) 
	    if(((schpl->r) == nil) 
		printf("---> r from schematic is nil.\n")
	    ) 
	    if(((laypl->r) == nil) 
		printf("---> r from layout is nil.\n")
	    ) 
	    if(((laypl->r) && (schpl->r)) then 
		(layr = float((laypl->r))) 
		(schr = float((schpl->r))) 
		(outport2 = outfile("compare.r" "a"))
		fprintf(outport2 "%f : %f\n" layr schr) 
		close(outport2) 
		if((abs((layr - schr)) > (0.02 * schr)) then 
		    (outport4 = outfile("error.r" "a")) 
		    fprintf(outport4 "Layout resistance = %f while Schematic resistance = %f\n" layr schr) 
		    close(outport4)
		    return(t)
		)
	    ) 
	    return(nil)
	)
    )
    procedure((compareInductor laypl schpl) 
	prog((layl schl layw schw laynturns
		schnturns
	    ) 
	    if(((schpl->l) == nil) 
		printf("---> schematic length is nil.\n")
	    ) 
	    if(((laypl->l) == nil) 
		printf("---> layout length is nil.\n")
	    ) 
	    if(((laypl->l) && (schpl->l)) then 
		(layl = float((laypl->l))) 
		(schl = float((schpl->l))) 
		(outport2 = outfile("compare.ind" "a"))
		fprintf(outport2 "%f : %f\n" layl schl) 
		close(outport2) 
		if((abs((layl - schl)) > 0.1) then 
		    (outport4 = outfile("error.ind" "a")) 
		    fprintf(outport4 "Layout length = %f while Schematic length = %f\n" layl schl) 
		    close(outport4)
		    return(t)
		)
	    ) 
	    if(((schpl->w) == nil) 
		printf("---> schematic width is nil.\n")
	    )
	    if(((laypl->w) == nil) 
		printf("---> layout width is nil.\n")
	    ) 
	    if(((laypl->w) && (schpl->w)) then 
		(layw = float((laypl->w))) 
		(schw = float((schpl->w))) 
		(outport2 = outfile("compare.ind" "a"))
		fprintf(outport2 "%f : %f\n" layw schw) 
		close(outport2) 
		if((abs((layw - schw)) > (0.01 * schw)) then 
		    (outport4 = outfile("error.ind" "a")) 
		    fprintf(outport4 "Layout width = %f while Schematic width = %f\n" layw schw) 
		    close(outport4)
		    return(t)
		)
	    ) 
	    if(((schpl->nturns) == nil) 
		printf("---> schematic nturns is nil.\n")
	    ) 
	    if(((laypl->nturns) == nil) 
		printf("---> layout nturns is nil.\n")
	    ) 
	    if(((laypl->nturns) && (schpl->nturns)) then 
		(laynturns = float((laypl->nturns))) 
		(schnturns = float((schpl->nturns))) 
		(outport2 = outfile("compare.ind" "a"))
		fprintf(outport2 "%f : %f\n" laynturns schnturns) 
		close(outport2) 
		if((abs((laynturns - schnturns)) > (0.01 * schnturns)) then 
		    (outport4 = outfile("error.ind" "a")) 
		    fprintf(outport4 "Layout nturns = %f while Schematic nturns = %f\n" laynturns schnturns) 
		    close(outport4)
		    return(t)
		)
	    )
	    return(nil)
	)
    ) 
    procedure((compareTline laypl schpl) 
	prog((layl schl layw schw) 
	    if(((schpl->l) == nil) 
		printf("---> schematic length is nil.\n")
	    ) 
	    if(((laypl->l) == nil) 
		printf("---> layout length is nil.\n")
	    ) 
	    if(((laypl->l) && (schpl->l)) then 
		(layl = float((laypl->l))) 
		(schl = float((schpl->l))) 
		(outport2 = outfile("compare.trl" "a"))
		fprintf(outport2 "%f : %f\n" layl schl) 
		close(outport2) 
		if((abs((layl - schl)) > (0.02 * schl)) then 
		    (outport4 = outfile("error.trl" "a")) 
		    fprintf(outport4 "Layout length = %f while Schematic length = %f\n" layl schl) 
		    close(outport4)
		    return(t)
		)
	    ) 
	    if(((schpl->w) == nil) 
		printf("---> schematic width is nil.\n")
	    )
	    if(((laypl->w) == nil) 
		printf("---> layout width is nil.\n")
	    ) 
	    if(((laypl->w) && (schpl->w)) then 
		(layw = float((laypl->w))) 
		(schw = float((schpl->w))) 
		(outport2 = outfile("compare.trl" "a"))
		fprintf(outport2 "%f : %f\n" layw schw) 
		close(outport2) 
		if((abs((layw - schw)) > (0.01 * schw)) then 
		    (outport4 = outfile("error.trl" "a")) 
		    fprintf(outport4 "Layout width = %f while Schematic width = %f\n" layw schw) 
		    close(outport4)
		    return(t)
		)
	    ) 
	    return(nil)
	)
    ) 
    procedure((compareDiode laypl schpl) 
	prog((layw schw) 
	    if(((schpl->wd) == nil) 
		printf("---> w from schematic is nil.\n")
	    ) 
	    if(((laypl->wd) == nil) 
		printf("---> w from layout is nil.\n")
	    ) 
	    if(((laypl->wd) && (schpl->wd)) then 
		(layw = float((laypl->wd))) 
		(schw = float((schpl->wd))) 
		(outport2 = outfile("compare.w" "a"))
		fprintf(outport2 "%f : %f\n" layw schw) 
		close(outport2) 
		if((abs((layw - schw)) > 0.1) then 
		    (outport4 = outfile("error.w" "a")) 
		    fprintf(outport4 "Layout width = %f while Schematic width = %f\n" layw schw) 
		    close(outport4)
		    return(t)
		)
	    ) 
	    return(nil)
	)
    ) 
    procedure((compareCapacitor laypl schpl) 
	prog((layc schc) 
	    if(((schpl->c) == nil) 
		printf("---> c from schematic is nil.\n")
	    ) 
	    if(((laypl->c) == nil) 
		printf("---> c from layout is nil.\n")
	    ) 
	    if(((laypl->c) && (schpl->c)) then 
		(layc = float((laypl->c))) 
		(schc = float((schpl->c))) 
		(outport2 = outfile("compare.c" "a"))
		fprintf(outport2 "%f : %f\n" layc schc) 
		close(outport2) 
		if((abs((layc - schc)) > (0.02 * layc)) then 
		    (outport4 = outfile("error.c" "a")) 
		    fprintf(outport4 "Layout capacitance = %f while Schematic capacitance = %f\n" layc schc) 
		    close(outport4)
		    return(t)
		)
	    ) 
	    return(nil)
	)
    ) 
    procedure((compareMOS laypl schpl) 
	prog((layw schw layl schl) 
	    if((((schpl->l) == nil) && ((schpl->w) == nil)) 
		printf("---> Both l & w from schematic are nil.\n")
	    ) 
	    if((((laypl->l) == nil) && ((laypl->w) == nil)) 
		printf("---> Both l & w from layout are nil.\n")
	    ) 
	    if(((laypl->l) && (schpl->l)) then 
		(layl = float((laypl->l))) 
		(schl = float((schpl->l))) 
		(outport = outfile("compare.l" "a"))
		fprintf(outport "%f : %f\n" layl schl) 
		close(outport) 
		if((abs((layl - schl)) > 0.01) then 
		    (outport3 = outfile("error.l" "a")) 
		    fprintf(outport3 "Layout length = %f while Schematic length = %f\n" layl schl) 
		    close(outport3)
		    return(t)
		) else 
		if((((laypl->l) == nil) && ((schpl->l) == nil)) then 
		    (outport3 = outfile("error.l" "a")) 
		    fprintf(outport3 "Layout and Schematic missing property l") 
		    close(outport3)
		    return(t) else 
		    if(((laypl->l) == nil) then 
			(outport3 = outfile("error.l" "a")) 
			fprintf(outport3 "Layout missing property l") 
			close(outport3)
			return(t)
		    ) 
		    if(((schpl->l) == nil) then 
			(outport3 = outfile("error.l" "a")) 
			fprintf(outport3 "Schematic missing property l") 
			close(outport3)
			return(t)
		    )
		)
	    ) 
	    if(((laypl->w) && (schpl->w)) then 
		(layw = float((laypl->w))) 
		(schw = float((schpl->w))) 
		(outport2 = outfile("compare.w" "a"))
		fprintf(outport2 "%f : %f\n" layw schw) 
		close(outport2) 
		if((abs((layw - schw)) > 0.1) then 
		    (outport4 = outfile("error.w" "a")) 
		    fprintf(outport4 "Layout width = %f while Schematic width = %f\n" layw schw) 
		    close(outport4)
		    return(t)
		)
	    )
	    return(nil)
	)
    )
    (permuteDevice parallel "capacitor" parallelCapacitor) 
    (permuteDevice parallel "diode" parallelDiode) 
    (permuteDevice parallel "inductor" parallelInductor) 
    (permuteDevice parallel "dfet" parallelMOS) 
    (permuteDevice parallel "mfet" parallelMOS)
    (permuteDevice parallel "mfetcap" parallelMOS) 
    (permuteDevice parallel "resistor" parallelResistor) 
    (permuteDevice series "capacitor" seriesCapacitor) 
    (permuteDevice series "resistor" seriesResistor) 
    (permuteDevice series "inductor" seriesInductor)
    (compareDeviceProperty "capacitor" compareCapacitor) 
    (compareDeviceProperty "rescap" compareCapacitor) 
    (compareDeviceProperty "diode" compareDiode) 
    (compareDeviceProperty "dfet" compareMOS) 
    (compareDeviceProperty "mfet" compareMOS)
    (compareDeviceProperty "m51fet" compareMOS) 
    (compareDeviceProperty "mfetcap" compareMOS) 
    (compareDeviceProperty "resistor" compareResistor) 
    (compareDeviceProperty "tline" compareTline)
)